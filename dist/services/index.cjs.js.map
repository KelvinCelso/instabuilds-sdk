{"version":3,"sources":["../../src/services/index.ts","../../src/services/chatgpt.ts"],"sourcesContent":["export * from \"./chatgpt.js\"","import axios from 'axios';\nimport { AxiosInstance } from 'axios';\n\nimport { SDKConfig } from '../types/config.js';\nimport { ChatGPTInput } from '../types/input-types.js';\nimport { ChatGPTResponse } from '../types/api-responses.js';\n\n/**\n * ChatGPT service class for interacting with the ChatGPT API.\n * @class\n */\nclass ChatGPT {\n  /**\n   * The Axios instance for making HTTP requests.\n   * @private\n   */\n  private client: AxiosInstance;\n\n  /**\n   * Creates an instance of ChatGPT service.\n   * @param {SDKConfig} config - The configuration object for the service.\n   */\n  constructor(config: SDKConfig) {\n    this.client = axios.create({\n      baseURL: config.baseUrl || 'https://api.yourdomain.com',\n      headers: {\n        'Authorization': `Bearer ${config.apiKey}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  /**\n   * Sends a completion request to the ChatGPT API.\n   * @param {ChatGPTInput} input - The input for the completion request.\n   * @returns {Promise<ChatGPTResponse>} A promise that resolves to the ChatGPT API response.\n   * @throws {Error} If there's an error with the API request.\n   */\n  async completion(input: ChatGPTInput): Promise<ChatGPTResponse> {\n    try {\n      const response = await this.client.post<ChatGPTResponse>('/api/v1/gpt/completion', input);\n      return response.data;\n    } catch (error) {\n      throw new Error(`ChatGPT API Error: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Sends a single question to the ChatGPT API.\n   * @param {string} question - The question to ask.\n   * @param {ChatGPTInput['options']} [options] - Optional parameters for the request.\n   * @returns {Promise<ChatGPTResponse>} A promise that resolves to the ChatGPT API response.\n   * @throws {Error} If there's an error with the API request.\n   */\n  async ask(question: string, options?: ChatGPTInput['options']): Promise<ChatGPTResponse> {\n    return this.completion({ messages: [{ role: 'user', content: question }], options });\n  }\n}\n\nexport default ChatGPT;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;ACAA,mBAAkB;","names":[]}